{"version":3,"sources":["utils/calculateResult.js","actions/index.js","utils/actionTypes.js","components/NumberBtn.js","components/OperationBtn.js","components/BackspaceBtn.js","components/AllClearBtn.js","components/NeutralBtn.js","components/DecimalPointBtn.js","components/Calculator.js","containers/Calculator.js","reducers/calculator.js","reducers/index.js","store.js","index.js"],"names":["decimal_js__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","decimal_js__WEBPACK_IMPORTED_MODULE_0___default","n","replace_expression","expression","replace","counter","str","seq","split","length","isCorrectNumberOfBranckets","__webpack_exports__","lastLetter","slice","isLastLetterArithmeticOperator","test","isLastLetterOpenBrancket","finalExpression","console","log","concat","ans","eval","Decimal","toFixed","toNumber","toExpression","type","payload","operationToExpression","op","numberToExpression","num","restoreExpression","showSolution","result","calculateResult","backspaceExpression","allClear","addDecimalPoint","NumBtn","_ref","onClick","react_default","a","createElement","className","OperationBtn","display","BackspaceBtn","AllClearBtn","NeutralBtn","DecimalPointBtn","Calculator","calculator","actions","currentExpression","displayResult","id","disabled","value","components_AllClearBtn","components_OperationBtn","NumberBtn","components_BackspaceBtn","components_DecimalPointBtn","components_NeutralBtn","connect","state","dispatch","bindActionCreators","hasNeutral","includes","getDecimalDisplay","currentNumber","getCurrentNumber","revercedExpression","reverse","currentNumberArray","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","unshift","err","return","Number","join","INITIAL_STATE","currentResult","combineReducers","arguments","action","String","Object","objectSpread","checkAndReplaceDicimalPoint","addtionalLetter","isAddtionalLetterArithmeticOperator","toString","addOperationToExpression","lastIndexOf","createStore","reducer","window","__REDUX_DEVTOOLS_EXTENSION__","App","containers_Calculator","Component","render","es","store","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.b8c16e46.chunk.js","sourcesContent":["import Decimal from \"decimal.js\";\n\nconst replace_expression = expression => {\n  return expression\n    .replace(/=\\s*$/, \"\")\n    .replace(\"×\", \"*\")\n    .replace(\"÷\", \"/\");\n};\n\nconst counter = (str, seq) => {\n  return str.split(seq).length - 1;\n};\n\nconst isCorrectNumberOfBranckets = expression => {\n  const numberOfOpenBrancket = counter(expression, \"(\");\n  const numberOfCloseBrancket = counter(expression, \")\");\n  return numberOfOpenBrancket === numberOfCloseBrancket;\n};\n\nexport default expression => {\n  const lastLetter = expression.slice(-1);\n  const isLastLetterArithmeticOperator = /[÷×+-]/.test(lastLetter);\n  const isLastLetterOpenBrancket = /\\(/.test(lastLetter);\n\n  let finalExpression = expression;\n  // \"(\"なら計算できないからreturnする\n  if (isLastLetterOpenBrancket || expression === \"\") {\n    return \"\";\n  }\n\n  if (isLastLetterArithmeticOperator) {\n    finalExpression = expression.slice(0, -1);\n  }\n  console.log(`finalExpression: ${finalExpression}`); // これ残す\n  if (isCorrectNumberOfBranckets(expression)) {\n    const ans = eval(replace_expression(finalExpression));\n    // Decimalは少数点の計算ではなく、整数のときや少数点以下の0を表示しないようにするために使っている。\n    return new Decimal(ans.toFixed(3)).toNumber();\n  } else {\n    return \"\";\n  }\n};\n","import * as actionTypes from \"../utils/actionTypes\";\nimport calculateResult from \"../utils/calculateResult\";\n\nexport const toExpression = (type, payload) => ({\n  type,\n  payload\n});\n\nexport const operationToExpression = op =>\n  toExpression(actionTypes.ADD_OPERATION, op);\n\nexport const numberToExpression = num =>\n  toExpression(actionTypes.ADD_NUMBER, num);\n\nexport const restoreExpression = payload => ({\n  type: actionTypes.RESTORE_EXPRESSION,\n  payload\n});\n\nexport const showSolution = expression => ({\n  type: actionTypes.SHOW_SOLUTION,\n  payload: {\n    expression,\n    result: calculateResult(expression)\n  }\n});\n\nexport const backspaceExpression = () => ({\n  type: actionTypes.BACKSPACE_EXPRESSION\n});\n\nexport const allClear = () => ({\n  type: actionTypes.ALL_CLEAR\n});\n\nexport const addDecimalPoint = () => ({\n  type: actionTypes.ADD_DECIMAL_POINT\n});\n","export const ADD_OPERATION = \"ADD_OPERATION\";\nexport const ADD_NUMBER = \"ADD_NUMBER\";\nexport const RESTORE_EXPRESSION = \"RESTORE_EXPRESSION\";\nexport const SHOW_SOLUTION = \"SHOW_SOLUTION\";\nexport const BACKSPACE_EXPRESSION = \"BACKSPACE_EXPRESSION;\";\nexport const ADD_DECIMAL_POINT = \"ADD_DECIMAL_POINT\";\nexport const ALL_CLEAR = \"ALL_CLEAR\";\n","import React from \"react\";\n\nconst NumBtn = ({ n, onClick }) => {\n  return (\n    <button className=\"button\" onClick={onClick}>\n      {n}\n    </button>\n  );\n};\n\nexport default NumBtn;\n","import React from \"react\";\n\nconst OperationBtn = ({ display, onClick }) => {\n  return (\n    <button className=\"button operation-btn\" onClick={onClick}>\n      {display}\n    </button>\n  );\n};\n\nexport default OperationBtn;\n","import React from \"react\";\n\nconst BackspaceBtn = ({ onClick }) => {\n  return (\n    <button className=\"button\" onClick={onClick}>\n      ←\n    </button>\n  );\n};\n\nexport default BackspaceBtn;\n","import React from \"react\";\n\nconst AllClearBtn = ({ onClick }) => {\n  return (\n    <button className=\"button all-clear-btn\" onClick={onClick}>\n      AC\n    </button>\n  );\n};\n\nexport default AllClearBtn;\n","import React from \"react\";\n\nconst NeutralBtn = ({ onClick }) => {\n  return (\n    <button className=\"button neutral-btn\" onClick={onClick}>\n      =\n    </button>\n  );\n};\n\nexport default NeutralBtn;\n","import React from \"react\";\n\nconst DecimalPointBtn = ({ onClick }) => {\n  return (\n    <button className=\"button\" onClick={onClick}>\n      .\n    </button>\n  );\n};\n\nexport default DecimalPointBtn;\n","import React from \"react\";\nimport NumberBtn from \"./NumberBtn\";\nimport OperationBtn from \"./OperationBtn\";\nimport BackspaceBtn from \"./BackspaceBtn\";\nimport AllClearBtn from \"./AllClearBtn\";\nimport NeutralBtn from \"./NeutralBtn\";\nimport DecimalPointBtn from \"./DecimalPointBtn\";\n\nconst Calculator = ({ calculator, actions }) => {\n  const { currentExpression, displayResult } = calculator;\n  return (\n    <div id=\"calculator-body\">\n      <div id=\"calculator-content\">\n        <div id=\"display-body\">\n          <input\n            disabled=\"disabled\"\n            id=\"current-expression\"\n            value={currentExpression}\n          />\n          <input\n            disabled=\"disabled\"\n            id=\"display-result\"\n            className=\"text-right\"\n            value={displayResult}\n          />\n        </div>\n\n        <div id=\"calculator-btn-section\">\n          <table id=\"calculator-btn-table\">\n            <tbody>\n              <tr>\n                <td className=\"caluclator-btn\">\n                  <AllClearBtn onClick={() => actions.allClear()} />\n                </td>\n                <td>\n                  <OperationBtn\n                    display={\"(\"}\n                    onClick={() => actions.operationToExpression(\"(\")}\n                  />\n                </td>\n                <td>\n                  <OperationBtn\n                    display={\")\"}\n                    onClick={() => actions.operationToExpression(\")\")}\n                  />\n                </td>\n                <td className=\"text-right\">\n                  <OperationBtn\n                    display={\"÷\"}\n                    onClick={() => actions.operationToExpression(\"÷\")}\n                  />\n                </td>\n              </tr>\n              <tr className=\"calculator-number-section\">\n                <td>\n                  <NumberBtn\n                    n={7}\n                    onClick={() => actions.numberToExpression(7)}\n                  />\n                </td>\n                <td>\n                  <NumberBtn\n                    n={8}\n                    onClick={() => actions.numberToExpression(8)}\n                  />\n                </td>\n                <td>\n                  <NumberBtn\n                    n={9}\n                    onClick={() => actions.numberToExpression(9)}\n                  />\n                </td>\n                <td className=\"text-right\">\n                  <OperationBtn\n                    display={\"×\"}\n                    onClick={() => actions.operationToExpression(\"×\")}\n                  />\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <NumberBtn\n                    n={4}\n                    onClick={() => actions.numberToExpression(4)}\n                  />\n                </td>\n                <td>\n                  <NumberBtn\n                    n={5}\n                    onClick={() => actions.numberToExpression(5)}\n                  />\n                </td>\n                <td>\n                  <NumberBtn\n                    n={6}\n                    onClick={() => actions.numberToExpression(6)}\n                  />\n                </td>\n                <td className=\"text-right\">\n                  <OperationBtn\n                    display={\"-\"}\n                    onClick={() => actions.operationToExpression(\"-\")}\n                  />\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <NumberBtn\n                    n={1}\n                    onClick={() => actions.numberToExpression(1)}\n                  />\n                </td>\n                <td>\n                  <NumberBtn\n                    n={2}\n                    onClick={() => actions.numberToExpression(2)}\n                  />\n                </td>\n                <td>\n                  <NumberBtn\n                    n={3}\n                    onClick={() => actions.numberToExpression(3)}\n                  />\n                </td>\n                <td className=\"text-right\">\n                  <OperationBtn\n                    display={\"+\"}\n                    onClick={() => actions.operationToExpression(\"+\")}\n                  />\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <BackspaceBtn onClick={actions.backspaceExpression} />\n                </td>\n                <td>\n                  <NumberBtn\n                    n={0}\n                    onClick={() => actions.numberToExpression(0)}\n                  />\n                </td>\n                <td>\n                  <DecimalPointBtn onClick={() => actions.addDecimalPoint()} />\n                </td>\n                <td className=\"text-right\">\n                  <NeutralBtn\n                    onClick={() => actions.showSolution(currentExpression)}\n                  />\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n        {/*calculator-btn-section*/}\n      </div>\n    </div>\n  );\n};\n\nexport default Calculator;\n","import { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport * as actions from \"../actions\";\nimport Calculator from \"../components/Calculator\";\n\nconst mapStateToProps = state => ({\n  calculator: state.calculator\n});\n\nconst mapDispatchToProps = dispatch => ({\n  actions: bindActionCreators(actions, dispatch)\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Calculator);\n","import * as actionTypes from \"../utils/actionTypes\";\nimport calculateResult from \"../utils/calculateResult\";\n\nconst hasNeutral = expression => {\n  return expression.includes(\"=\");\n};\n\nconst checkAndReplaceDicimalPoint = expression => {\n  if (hasNeutral(expression)) {\n    return \"0.\";\n  } else {\n    const lastLetter = expression.slice(-1);\n    if (/[.]/.test(lastLetter)) {\n      return expression;\n    } else if (!/[\\d]/.test(lastLetter)) {\n      return expression + \"0.\";\n    } else {\n      return expression + \".\";\n    }\n  }\n};\n\nconst addOperationToExpression = (expression, addtionalLetter) => {\n  const lastLetter = expression.slice(-1);\n  // const isLastLetterNumber = /[\\d]/.test(lastLetter);\n  // const isAdditionalLetterBracket = /[()]/.test(addtionalLetter);\n  const isLastLetterArithmeticOperator = /[÷×+-]/.test(lastLetter); // ArithmeticOperator: 四則演算子\n  const isAddtionalLetterArithmeticOperator = /[÷×+-]/.test(addtionalLetter);\n  if (hasNeutral(expression)) {\n    if (isAddtionalLetterArithmeticOperator) {\n      return getCurrentNumber(expression).toString() + addtionalLetter;\n    } else {\n      return getCurrentNumber(expression).toString();\n    }\n  } else if (\n    isLastLetterArithmeticOperator &&\n    isAddtionalLetterArithmeticOperator\n  ) {\n    return expression.slice(0, -1) + addtionalLetter;\n  } else {\n    return expression + addtionalLetter;\n  }\n};\n\n// @return [String]\nconst getDecimalDisplay = (expression, currentNumber) => {\n  const lastLetter = expression.slice(-1);\n  if (/[.]/.test(lastLetter)) {\n    return currentNumber + \".\";\n  } else if (!/[\\d]/.test(lastLetter)) {\n    return \"0.\";\n  } else {\n    return currentNumber + \".\";\n  }\n};\n\nconst getCurrentNumber = expression => {\n  const isLastLetterNumber = /[\\d.]/.test(expression.slice(-1));\n  if (!isLastLetterNumber) {\n    return \"\";\n  }\n  const revercedExpression = expression.split(\"\").reverse();\n  let currentNumberArray = [];\n  for (let str of revercedExpression) {\n    if (!/[\\d.]/.test(str)) {\n      break;\n    }\n    currentNumberArray.unshift(str);\n  }\n  return Number(currentNumberArray.join(\"\"));\n};\n\nconst backspaceExpression = expression => {\n  if (hasNeutral(expression)) {\n    return expression.slice(0, expression.lastIndexOf(\"=\"));\n  } else {\n    return expression.slice(0, -1);\n  }\n};\n\nconst INITIAL_STATE = {\n  currentExpression: \"\",\n  currentNumber: 0,\n  currentResult: 0,\n  displayResult: 0\n};\n\nexport default (state = INITIAL_STATE, action) => {\n  let expression = \"\";\n  let currentNumber = 0;\n  let currentResult = 0;\n\n  switch (action.type) {\n    case actionTypes.ADD_NUMBER:\n      if (hasNeutral(state.currentExpression)) {\n        expression = String(action.payload);\n      } else {\n        expression = state.currentExpression + action.payload;\n      }\n      currentNumber = getCurrentNumber(expression);\n      return {\n        ...state,\n        currentExpression: expression,\n        currentNumber: currentNumber,\n        displayResult: currentNumber\n      };\n\n    case actionTypes.ADD_DECIMAL_POINT:\n      expression = checkAndReplaceDicimalPoint(state.currentExpression);\n      return {\n        ...state,\n        currentExpression: expression,\n        displayResult: getDecimalDisplay(\n          state.currentExpression,\n          state.currentNumber\n        )\n      };\n\n    case actionTypes.ADD_OPERATION:\n      console.log(state.currentNumber);\n      expression = addOperationToExpression(\n        state.currentExpression,\n        action.payload\n      );\n      currentResult = calculateResult(expression);\n      return {\n        ...state,\n        currentExpression: expression,\n        currentNumber: 0,\n        currentResult: currentResult,\n        displayResult: currentResult\n      };\n\n    case actionTypes.SHOW_SOLUTION:\n      currentResult = calculateResult(state.currentExpression).toString();\n      return {\n        ...state,\n        currentExpression: state.currentExpression + \"=\" + currentResult,\n        currentNumber: currentResult,\n        currentResult: currentResult,\n        displayResult: currentResult\n      };\n\n    case actionTypes.BACKSPACE_EXPRESSION:\n      expression = backspaceExpression(state.currentExpression);\n      return {\n        ...state,\n        currentExpression: expression,\n        currentResult: calculateResult(expression),\n        currentNumber: getCurrentNumber(expression),\n        displayResult: calculateResult(expression)\n      };\n\n    case actionTypes.ALL_CLEAR:\n      return INITIAL_STATE;\n\n    case actionTypes.RESTORE_EXPRESSION:\n      expression = action.payload;\n      currentResult = calculateResult(expression);\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\nimport calculator from \"./calculator\";\n\nexport default combineReducers({ calculator });\n","import { createStore } from 'redux';\nimport reducer from './reducers';\n\nexport default createStore(\n  reducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  );","import React, { Component } from \"react\";\nimport { render } from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"./style.css\";\n\nimport Calculator from \"./containers/Calculator\";\nimport store from \"./store\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Calculator />\n      </div>\n    );\n  }\n}\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}